#!/usr/bin/ruby

# = Stella
# 
# === Your friend in web app performance testing
#
# Config (default paths):
# 
#     ./.stella/config   (current directory)
#     ~/.stella/config   (your home directory)
#
# Usage:
# 
#     $ stella -h
#     $ stella verify 
#     $ stella load -u 10 -t 60 http://test.example.com/
#     $ stella load -u 10 -r 40 -p plans/basic.rb http://test.example.com/

STELLA_LIB_HOME = File.expand_path File.join(File.dirname(__FILE__), '..', 'lib')

$:.unshift STELLA_LIB_HOME  # Put our local lib in first place

require 'drydock'
require 'stella'
require 'stella/cli'

# Command-line interface for bin/stella
class Stella::CLI::Definition
  extend Drydock
  
  debug :off
  
  default :verify    # when no command is provided
  trawler :verify    # unknown command names will forward here.
  
  # ----------------------------------------  STELLA GLOBALS  --------
  # ------------------------------------------------------------------
  
  global :A, :apikey, String, "API Key"
  global :S, :secret, String, "Secret Key"
  global :q, :quiet, "Be quiet!" do
    Stella.enable_quiet
  end
  global :D, :debug, "Enable debug mode" do
    Drydock.debug true
    Stella.enable_debug
  end
  global :v, :verbose, "Increase verbosity of output (e.g. -v or -vv or -vvv)" do
    Stella.loglev += 1
  end
  global :V, :version, "Display version number" do
    puts "Stella version: #{Stella::VERSION} (#{Stella::VERSION::PATCH})"
    exit 0
  end

  
  # ------------------------------------------------  STELLA  --------
  # ------------------------------------------------------------------

  about "Verify a testplan"
  usage "stella verify http://stellaaahhhh.com/"
  usage "stella verify -p path/2/testplan.rb http://stellaaahhhh.com/"
  option :b, :benchmark, "Benchmark mode (ignore wait times)"
  option :p, :testplan, String, "Path to testplan" do |v|
    raise Stella::InvalidOption, "Bad path: #{v}" unless File.exists?(v)
    v
  end
  command :verify => Stella::CLI
  
  about "Initialize Stella"
  command :init do
    Stella::Config.init
  end
  
  if Drydock.debug?
    about "Blast away all Stella config assets"
    command :blast do
      Stella::Config.blast
    end
  end
  
  
  # ----------------------------------  STELLA MISCELLANEOUS  --------
  # ------------------------------------------------------------------

  before do |obj|
    @start = Time.now
    Stella.enable_debug if Drydock.debug?
  end

  after do |obj|  
    @elapsed = Time.now - @start
    if Stella.loglev > 1 && @elapsed > 0.1
      puts
      puts "Elapsed: %.2f seconds" % @elapsed.to_f
    end
  end
  
end

begin
  Drydock.run!(ARGV, STDIN) if Drydock.run? && !Drydock.has_run?
rescue Drydock::ArgError, Drydock::OptError, Drydock::InvalidArgument => ex
  STDERR.puts ex.message
  STDERR.puts ex.usage
rescue Stella::Error => ex
  STDERR.puts ex.message
  STDERR.puts ex.backtrace if Drydock.debug?
rescue Interrupt
  puts "#{$/}Exiting... "
  exit 1
rescue => ex
  STDERR.puts "ERROR (#{ex.class.to_s}): #{ex.message}"
  STDERR.puts ex.backtrace if Drydock.debug?
end
