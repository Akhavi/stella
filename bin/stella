#!/usr/bin/env ruby 

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib')) # Make sure our local lib is first in line

# 
# 
# See:
# <tt>$ stella -h</tt>
#

require 'drydock'
require 'stella'
require 'stella/command/get'

debug :off

# ======================================================  GLOBALS  ============
global_usage "USAGE: #{$0} [global options] command [command options]"

global_option :V, :version, "Display Stella version" do; Stella.info(Stella::VERSION); exit 0; end
global_option :f, :format, String, "Specify the format for output files." do |v|; v; end
global_option :F, :force, "Force the command to ignore errors." 
global_option :q, :quiet, "Tell Stella to be quiet (overrides verbosity level)."
global_option :v, :verbose, "Verbosity level. The more the merrier (i.e. -vvv is greater than -v)." do |v|
  @val ||= 0
  @val += 1
end


# =====================================================  COMMANDS  ============
default :commands

# ---------------------------------------------------  stella get  ------------
usage "USAGE: #{$0} get [-u http://host/path/2/get]"
option :A, :auth, String, "Basic authentication username, password, and optional realm (colon separated)"
#option :P, :proxy, String, ""
#option     :proxyauth, String, ""
command :get => Stella::Command::Get do |obj, argv|
  
  argv.empty? ? obj.read_raw : obj.uri = argv[0]
  resp = obj.run
  
  resp.header.all.each do |h|
    puts "#{h[0]}: #{h[1]}"
  end
  
  #headers = { 'Content-Type' => 'text/xml' }
                          
  #@client = HTTPClient.new('http://localhost:3114')
  #@url = URI.parse "http://solutious.com/"
  ##@url = URI.parse 'https://delaagsterekening.nl/api/suggestions/status.json?token=253'
  ##@client.set_auth("https://delaagsterekening.nl/", "stella", "stella")
  #@client.set_cookie_store("/tmp/cookie.dat")
  #body, resp = @client.get @url, headers
  #body.header.all.each do |h|
  #  puts "#{h[0]}: #{h[1]}"
  #end
  ##puts @client
  #@client.save_cookie_store
end
alias_command :head, :get


# ----------------------------------------------  stella commands  ------------
usage "USAGE: #{$0} commands"
command :commands do
  Stella.info("Available commands:")
  # The commands method returns a hash of Drydock::Command objects
  Stella.info commands.keys.inject([]) { |list, command| list << command.to_s }.sort.join(', ')
end