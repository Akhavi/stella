#!/usr/bin/env ruby 

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib')) # Make sure our local lib is first in line

# 
# 
# See:
# <tt>$ stella -h</tt>
#

require 'drydock'
require 'stella'
require 'stella/command/form'

debug :on

global_usage "#{$0} [global options] command [command options]"
global_option :V, :version, "Display Stella version" do; Stella.info(Stella::VERSION); exit 0; end
#global_option :f, :format, String, "Specify the format for output files." do |v|; v; end
#global_option :F, :force, "Force the command to ignore errors." 
#global_option :q, :quiet, "Tell Stella to be quiet (overrides verbosity level)."
global_option :v, :verbose, "Verbosity level. The more the merrier (i.e. -vvv is greater than -v)." do |v|
  @val ||= 0
  @val += 1
end


default :commands


# ---------------------------------------------------  stella form  ------------
usage "#{$0} form [-u http://host/path/2/get]"
option :A, :auth, String, "Basic authentication username, password, and optional realm (colon separated)"
command :form => Stella::Command::Form do |obj, argv|
  raise "You must supply a URI" if argv.empty?
  
  
end



# ---------------------------------------------------  stella ab  ------------
usage "#{$0} [stella options] ab [Apache Bench options] URI"
ignore :options
command :ab do |obj,argv|
  puts argv
end

# ----------------------------------------------  stella commands  ------------
usage "USAGE: #{$0} commands"
command :commands do
  Stella.info("Available commands:")
  # The commands method returns a hash of Drydock::Command objects
  Stella.info commands.keys.inject([]) { |list, command| list << command.to_s }.sort.join(', ')
end